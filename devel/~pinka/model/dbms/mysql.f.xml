<?xml version="1.0" encoding="UTF-8"?>
<forth xmlns="http://forth.org.ru/ForthML/">

<wordlist name="mysql-hidden">

<slot2> charset database user pass  hostname port host  xml-stylesheet </slot2>
<slot> nport conn errno res resn  row col cols  omit-xml-declaration </slot>
<prop name="last-err-txt"><ss/></prop>

<def name="(connect)" ds=" -- x.conn|0 ">
  <comment>It returns: 0 on error; the connection id (the same as "conn") on success</comment>
  CLIENT_MULTI_STATEMENTS
  0 <rem> unix_socket </rem>
  nport
  database  DROP
  pass      DROP
  user      DROP
  hostname  DROP
  conn
  mysql_real_connect
</def>

<def name="?conn" ds=" -- ">
  <choose>
    conn     0 EQ <when/>
    errno 2003 EQ <when/>
    <exit/>
  </choose>
  `#mysql-no-conn STHROW
</def>

<def name="(close-conn)" ds=" -- ">
  conn <if> conn mysql_close DROP 0 conn! </if>
</def>

<def name="treat-err" ds=" -- ">
  conn mysql_errno DUP errno! <unless><exit/></unless>
  errno 2006 = <if><rem> MySQL server has gone away (check max_allowed_packet size in my.ini/[mysqld] )</rem> 
    (connect) DROP `#mysql-gone-away STHROW 
    <rem>
      In one case, making a query after this error produces Access Vilation in libmysql.dll
      (the initial error was due to out of memory in mysqld, but not in client)
    </rem>
  </if>
  errno 2013 = <if><rem>Lost connection to MySQL server during query</rem>
    (connect) DROP `#mysql-lost-connection STHROW
  </if>
  conn mysql_error ASCIIZ> set-last-err-txt
  errno 2003 = <if><rem>Can't connect to MySQL server</rem>
    <rem>
      There is no need to close the "conn" object, it can be reused.
      It will try to reconnect automatically due to MYSQL_OPT_RECONNECT option.
      OTOH, this state with empty "conn" would be inconsistent, see "clear".
    </rem>
  </if>
  last-err-txt STHROW
</def>

<def name="set-conn-options" ds=" -- ">
  charset DUP <unless> 2DROP `utf8 </unless>
  DROP  MYSQL_SET_CHARSET_NAME  conn  mysql_options <unless> treat-err </unless>

  1 SP@ MYSQL_OPT_RECONNECT conn  mysql_options <unless> treat-err </unless>
  DROP  <!-- does't work before 5.1.6 -->
</def>


<export>
  <event name="before-query"/>
</export>

<include href="mysql.immutable.f.xml"/>

<export>

<def name="clear">
  conn <unless-exit/>
  free-res-all
  <rem>
    Note that if 'conn' is null then 'res' is also null.
    Hint: 'res' is always null in place where 'treat-err' is called.
  </rem>
</def>

<def name="open" ds=" -- ">
  conn <unless> mysql_new_conn conn! set-conn-options </unless>
  (connect) <if><exit/></if>
  treat-err
</def>

<def name="close" ds=" -- ">
  0  errno!  0. set-last-err-txt
  conn <unless><exit/></unless>
  clear (close-conn)
</def>

<handler event="shutdown"> close </handler>

<handler event="cleanup"> clear </handler>

<alias name="connect" word="open" />

<def name="use-database" ds=" d-db -- ">
  DROP conn mysql_select_db <if> treat-err </if><rem> Zero for success </rem> 
</def>

<def name="assume-cred" ds=" d-db d-host d-user d-passw -- ">
  pass! user! hostname! database!
</def>

<def name="query-value" ds=" d-query -- d-value | 0 0 ">
  query  next-result? <if> next-row? <if> next-col? <if> get-value <exit/></if></if></if>
  0.
</def>

<def name="query-2value" ds=" d-query -- d-value1 d-value2 | 0 0  0 0 ">
  query-value
  res <if> row <if> next-col? <if> get-value <exit/></if></if></if>
  0.
</def>

<alias name="query"      ds=" d-txt-query -- "   word="query"/>
<alias name="next-value" ds=" -- d-value | 0 0 " word="next-value"/>

<alias name="next-result?"  ds=" -- 0|res  "        word="next-result?" />
<alias name="next-row?"     ds=" -- 0|row  "        word="next-row?"    />
<alias name="next-col?"     ds=" -- flag   "        word="next-col?"    />
<alias name="get-value"     ds=" -- d-val  "        word="get-value"    />
<alias name="get-name"      ds=" -- d-name "        word="get-name"     />
<alias name="fetch-value"   ds=" d-name -- d-val "  word="fetch-value"  />

<include href="enum-response.f.xml"/>

</export>


<wordlist name="buf">
  <include href="model/io/buffer-coalescing.f.xml" xml:base="../../"/>
</wordlist>

<init> 40 1024 * buf::set-buffer-size </init>
<comment>
  При сериализации 'таблиц' в XML-форму происходит конкатенация
  большого числа мелких фрагментов текста. Для уменьшения числа
  передач, данные вначале объединяются в буфере, а потом, уже
  большими кусками передаются дальше.
</comment>

<def name="store-chunk" ds=" addr u -- ">
  buf::write
</def>

<include href="serialize-xml.f.xml"/>


<def name="store-xml-stylesheet" ds=" -- ">
  xml-stylesheet store-instruction-stylesheet
  0. xml-stylesheet!
</def>

<export>

<alias name="disable-output-escaping.xml!" ds=" flag -- " word="disable-output-escaping.xml!"/>

<def name="allow-output.xml" ds=" -- "> TRUE disable-output-escaping.xml! </def>

<alias name="omit-xml-declaration!" ds=" flag -- " word="omit-xml-declaration!"/>

<def name="set-xml-stylesheet" ds=" d-url -- ">
  <comment> It should be set on each query </comment>
  xml-stylesheet! 
</def>

<alias name="assume-xml-stylesheet" word="set-xml-stylesheet" />

<alias name="xml-stylesheet" word="xml-stylesheet" ds=" -- d-url | 0 0 "/>

<def name="query-xml-per" ds=" d-query xt -- ">
  buf::set-consumer
  buf::clear
  omit-xml-declaration <unless>
    store-xml-declaration
  </unless>
  store-xml-stylesheet
  query store-response
  0. buf::transmit <rem> end-of-data mark </rem>
</def>

</export>
</wordlist>
</forth>
